import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from system.dispatcher import dp, bot


class AddingTrackNumber(StatesGroup):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    write_order_number = State()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    result = State()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤


@dp.callback_query_handler(lambda c: c.data == "add_track_number")
async def order(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞) –∫ –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    greeting_message = "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. üìÆ"
    await bot.send_message(callback_query.from_user.id, greeting_message)
    await AddingTrackNumber.write_order_number.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


def get_order_status(order_number):
    conn = sqlite3.connect('setting/orders.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM order_status WHERE order_number = ?", (order_number,))
    result = cursor.fetchone()
    if result:
        _, in_processing, sent, cancelled, refund = result
        status = []
        if in_processing:
            status.append("–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ")
        if sent:
            status.append("–ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ú–∏–Ω—Å–∫")
        if cancelled:
            status.append("–ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ú–∏–Ω—Å–∫–µ")
        if refund:
            status.append("–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω")
        return status


@dp.message_handler(state=AddingTrackNumber.write_order_number)
async def write_order_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    order_number = message.text  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message.text –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (state) —Å –∏–º–µ–Ω–µ–º order_number
    await state.update_data(order_number=order_number)
    conn = sqlite3.connect('setting/orders.db')  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    cursor = conn.cursor()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM orders WHERE order_number = ?", (order_number,))
    row = cursor.fetchone()  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    if row:
        status_list = get_order_status(order_number)
        status_message = "\n".join(status_list) if status_list else "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        order_details = (f"–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!\n\n"
                         f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {row[0]}\n"
                         f"üìù –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {row[1]}\n"
                         f"üí∏ –¶–µ–Ω–∞: {row[2]}\n"
                         f"üìÜ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {row[3]}\n"
                         f"üîî –°—Ç–∞—Ç—É—Å: {status_message}\n"
                         "\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")
        await bot.send_message(message.from_user.id, order_details)
        cursor.execute(
            """CREATE TABLE IF NOT EXISTS user_orders (user_id, order_number, name, price, approximate_date, status)""")
        cursor.execute(
            '''INSERT INTO user_orders (user_id, order_number, name, price, approximate_date, status) VALUES (?, ?, ?, ?, ?, ?)''',
            (message.from_user.id, order_number, row[1], row[2], row[3], status_message))
        conn.commit()
        dell_duplicate_order_number(order_number)
    else:
        await bot.send_message(message.from_user.id, "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞)


def dell_duplicate_order_number(order_number):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_orders"""
    conn = sqlite3.connect('setting/orders.db')
    cursor = conn.cursor()
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_orders
    cursor.execute(
        "DELETE FROM user_orders WHERE rowid NOT IN (SELECT MIN(rowid) FROM user_orders GROUP BY user_id, order_number)")
    conn.commit()  # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


def adding_track_number_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dp.register_message_handler(order, state="*")
    dp.register_message_handler(write_order_number, state=AddingTrackNumber.write_order_number)
