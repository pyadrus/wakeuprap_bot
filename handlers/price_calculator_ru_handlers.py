from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from keyboards.delivery_keyboard import delivery_keyboard_technics_ru
from keyboards.delivery_keyboard import product_category_by_russia_euro_ru_keyboard
from keyboards.delivery_keyboard import product_category_by_russia_polish_zloty_ru_keyboard
from keyboards.delivery_keyboard import product_category_by_russia_yuan_ru_keyboard
from messages.message_text_calculate import message_text_price_euro
from messages.message_text_calculate import message_text_price_polish_zloty
from messages.message_text_calculate import message_text_price_yuan
from system.dispatcher import COMMISSION_RU_EUR_YUAN
from system.dispatcher import DELIVERY_RU_EUR
from system.dispatcher import DELIVERY_RU_YUAN_ACCESSORIES
from system.dispatcher import DELIVERY_RU_YUAN_CLOTHING
from system.dispatcher import DELIVERY_RU_YUAN_SHOES
from system.dispatcher import dp, bot
from utils.database_init import get_currencies


class TechStateAcceleratedByTruck(StatesGroup):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    price_yuan_ru = State()
    price_yuan_ru_accessories = State()
    price_shoes_ru_yuan = State()
    price_clothing_ru_yuan = State()
    price_euro_ru = State()


@dp.callback_query_handler(lambda c: c.data == 'russia')
async def calculate_cost_handler(callback_query: types.CallbackQuery):
    """–ù–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã –∏ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã"""
    technics_delivery_keyboard = delivery_keyboard_technics_ru()
    message_text_clothing = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ üá∑üá∫ –†–æ—Å—Å–∏—è.\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É.")
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    await bot.send_message(callback_query.from_user.id, message_text_clothing, reply_markup=technics_delivery_keyboard,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'polish_zloty_ru')
async def calculate_cost_handler(callback_query: types.CallbackQuery):
    """–ù–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã –∏ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã"""
    product_category_keyboard = product_category_by_russia_polish_zloty_ru_keyboard()
    message_text_clothing = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ üáµüá± –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π.\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.")
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    await bot.send_message(callback_query.from_user.id, message_text_clothing, reply_markup=product_category_keyboard,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'accessories_ru_polish_zloty')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–ª—å—Å–∫–∏—Ö –∑–ª–æ—Ç—ã—Ö"""
    await bot.send_message(callback_query.from_user.id, message_text_price_polish_zloty,
                           parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        polish_zloty_ru = row[4]  # –ö—É—Ä—Å –ü–æ–ª—å—Å–∫–æ–≥–æ –∑–ª–æ—Ç–æ–≥–æ –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=polish_zloty_ru)
        await TechStateAcceleratedByTruck.price_euro_ru.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.callback_query_handler(lambda c: c.data == 'shoes_ru_polish_zloty')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–ª—å—Å–∫–∏—Ö –∑–ª–æ—Ç—ã—Ö"""
    await bot.send_message(callback_query.from_user.id, message_text_price_polish_zloty,
                           parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        polish_zloty_ru = row[4]  # –ö—É—Ä—Å –ü–æ–ª—å—Å–∫–æ–≥–æ –∑–ª–æ—Ç–æ–≥–æ –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=polish_zloty_ru)
        await TechStateAcceleratedByTruck.price_euro_ru.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.callback_query_handler(lambda c: c.data == 'clothing_ru_polish_zloty')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–ª—å—Å–∫–∏—Ö –∑–ª–æ—Ç—ã—Ö"""
    await bot.send_message(callback_query.from_user.id, message_text_price_polish_zloty,
                           parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        polish_zloty_ru = row[4]  # –ö—É—Ä—Å –ü–æ–ª—å—Å–∫–æ–≥–æ –∑–ª–æ—Ç–æ–≥–æ –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=polish_zloty_ru)
        await TechStateAcceleratedByTruck.price_euro_ru.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.callback_query_handler(lambda c: c.data == 'euro_ru')
async def calculate_cost_handler(callback_query: types.CallbackQuery):
    """–ù–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã –∏ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã"""
    product_category_keyboard = product_category_by_russia_euro_ru_keyboard()
    message_text_clothing = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ üá™üá∫ –ï–≤—Ä–æ.\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.")
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    await bot.send_message(callback_query.from_user.id, message_text_clothing, reply_markup=product_category_keyboard,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'accessories_ru_euro')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –µ–≤—Ä–æ"""
    await bot.send_message(callback_query.from_user.id, message_text_price_euro,
                           parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        euro_ru = row[5]  # –ö—É—Ä—Å –ï–≤—Ä–æ –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=euro_ru)
        await TechStateAcceleratedByTruck.price_euro_ru.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.callback_query_handler(lambda c: c.data == 'shoes_ru_euro')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –µ–≤—Ä–æ"""
    await bot.send_message(callback_query.from_user.id, message_text_price_euro,
                           parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        euro_ru = row[5]  # –ö—É—Ä—Å –ï–≤—Ä–æ –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=euro_ru)
        await TechStateAcceleratedByTruck.price_euro_ru.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.callback_query_handler(lambda c: c.data == 'clothing_ru_euro')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –µ–≤—Ä–æ"""
    await bot.send_message(callback_query.from_user.id, message_text_price_euro,
                           parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        euro_ru = row[5]  # –ö—É—Ä—Å –ï–≤—Ä–æ –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=euro_ru)
        await TechStateAcceleratedByTruck.price_euro_ru.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.message_handler(state=TechStateAcceleratedByTruck.price_euro_ru)
async def process_price(message: types.Message, state: FSMContext):
    """–ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        price = float(message.text)  # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        shipping_cost = data.get('shipping_cost', 0)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è
        final_purchase_price = (price * shipping_cost) + float(DELIVERY_RU_EUR) + float(COMMISSION_RU_EUR_YUAN)
        rounded_number = round(final_purchase_price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)

        message_text = (f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚âà {rounded_number} üá∑üá∫ —Ä—É–±.</b>\n"
                        "\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")

        await bot.send_message(message.chat.id, message_text)
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@dp.callback_query_handler(lambda c: c.data == 'yuan_ru')
async def calculate_cost_handler(callback_query: types.CallbackQuery):
    """–ù–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã –∏ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã"""
    product_category_keyboard = product_category_by_russia_yuan_ru_keyboard()
    message_text_clothing = ("–í—ã –≤—ã–±—Ä–∞–ª–∏ üá®üá≥ –Æ–∞–Ω—å.\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.")
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    await bot.send_message(callback_query.from_user.id, message_text_clothing, reply_markup=product_category_keyboard,
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'accessories_ru_yuan')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö"""
    await bot.send_message(callback_query.from_user.id, message_text_price_yuan, parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        yuan_ru = row[6]  # –ö—É—Ä—Å –Æ–∞–Ω–µ–π –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=yuan_ru)
        await TechStateAcceleratedByTruck.price_yuan_ru_accessories.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.message_handler(state=TechStateAcceleratedByTruck.price_yuan_ru_accessories)
async def process_price(message: types.Message, state: FSMContext):
    """–ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        price = float(message.text)  # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        shipping_cost = data.get('shipping_cost', 0)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è
        final_purchase_price = (price * shipping_cost) + float(DELIVERY_RU_YUAN_ACCESSORIES) + float(
            COMMISSION_RU_EUR_YUAN)
        rounded_number = round(final_purchase_price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)

        message_text = (f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚âà {rounded_number} üá∑üá∫ —Ä—É–±.</b>\n"
                        "\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")

        await bot.send_message(message.chat.id, message_text)
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@dp.callback_query_handler(lambda c: c.data == 'shoes_ru_yuan')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö"""
    await bot.send_message(callback_query.from_user.id, message_text_price_yuan, parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        yuan_ru = row[6]  # –ö—É—Ä—Å –Æ–∞–Ω–µ–π –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=yuan_ru)
        await TechStateAcceleratedByTruck.price_shoes_ru_yuan.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.message_handler(state=TechStateAcceleratedByTruck.price_shoes_ru_yuan)
async def process_price(message: types.Message, state: FSMContext):
    """–ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        price = float(message.text)  # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        shipping_cost = data.get('shipping_cost', 0)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è
        final_purchase_price = (price * shipping_cost) + float(DELIVERY_RU_YUAN_SHOES) + float(COMMISSION_RU_EUR_YUAN)
        rounded_number = round(final_purchase_price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)

        message_text = (f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚âà {rounded_number} üá∑üá∫ —Ä—É–±.</b>\n"
                        "\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")

        await bot.send_message(message.chat.id, message_text)
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@dp.callback_query_handler(lambda c: c.data == 'clothing_ru_yuan')
async def process_delivery_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö"""
    await bot.send_message(callback_query.from_user.id, message_text_price_yuan, parse_mode=types.ParseMode.HTML)
    row = get_currencies()
    if row:
        yuan_ru = row[6]  # –ö—É—Ä—Å –Æ–∞–Ω–µ–π –∫ –†—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é
        await state.update_data(shipping_cost=yuan_ru)
        await TechStateAcceleratedByTruck.price_clothing_ru_yuan.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.message_handler(state=TechStateAcceleratedByTruck.price_clothing_ru_yuan)
async def process_price(message: types.Message, state: FSMContext):
    """–ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        price = float(message.text)  # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        shipping_cost = data.get('shipping_cost', 0)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è
        final_purchase_price = (price * shipping_cost) + float(DELIVERY_RU_YUAN_CLOTHING) + float(
            COMMISSION_RU_EUR_YUAN)
        rounded_number = round(final_purchase_price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)

        message_text = (f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚âà {rounded_number} üá∑üá∫ —Ä—É–±.</b>\n"
                        "\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")

        await bot.send_message(message.chat.id, message_text)
        await state.finish()
    except ValueError:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


def price_calculator_ru_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    dp.register_message_handler(calculate_cost_handler)  # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã
    dp.register_message_handler(process_delivery_handler)  # –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
