from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from system.dispatcher import dp, bot
from utils.database_init import connecting_database, creating_table_for_orders


class MakingAnOrder(StatesGroup):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞"""
    write_order_number = State()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    write_name = State()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    write_price = State()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    write_approximate_date = State()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏


@dp.callback_query_handler(lambda c: c.data == "make_an_order")
async def order(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞) –∫ –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    greeting_message = ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä üì¶ –∑–∞–∫–∞–∑–∞:")
    await bot.send_message(callback_query.from_user.id, greeting_message)
    await MakingAnOrder.write_order_number.set()  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


@dp.message_handler(state=MakingAnOrder.write_order_number)
async def write_order_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    order_number = message.text  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message.text –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (state) —Å –∏–º–µ–Ω–µ–º order_number
    await state.update_data(order_number=order_number)
    await MakingAnOrder.next()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç) –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ üìù –Ω–∞–∑–≤–∞–Ω–∏–µ:")


@dp.message_handler(state=MakingAnOrder.write_name)
async def write_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    name = message.text  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message.text –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (state) —Å –∏–º–µ–Ω–µ–º name
    await state.update_data(name=name)
    await MakingAnOrder.next()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç) –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ üí∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã:")


@dp.message_handler(state=MakingAnOrder.write_price)
async def write_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä"""
    price = message.text  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π message.text –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (state) —Å –∏–º–µ–Ω–µ–º price
    await state.update_data(price=price)
    await MakingAnOrder.next()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç) –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é üìÜ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:")


@dp.message_handler(state=MakingAnOrder.write_approximate_date)
async def write_approximate_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    approximate_date = message.text
    await state.update_data(approximate_date=approximate_date)
    data = await state.get_data()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    order_number = data.get('order_number')  # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    name = data.get('name')  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    price = data.get('price')  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    approximate_date = data.get('approximate_date')  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
    creating_table_for_orders()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    conn, cursor = connecting_database()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SqLite
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "INSERT INTO orders (order_number, name, price, approximate_date) VALUES (?, ?, ?, ?)",
        (order_number, name, price, approximate_date))
    in_processing = 0  # –û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ
    sent = 0  # –ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ú–∏–Ω—Å–∫
    cancelled = 0  # –ó–∞–∫–∞–∑ –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ú–∏–Ω—Å–∫–µ
    refund = 0  # –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω
    cursor.execute(
        "INSERT INTO order_status (order_number, in_processing, sent, cancelled, refund) VALUES (?, ?, ?, ?, ?)",
        (order_number, in_processing, sent, cancelled, refund))
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    conn.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await state.finish()

    order_details = (f"–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n\n"
                     f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n"
                     f"üìù –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {name}\n"
                     f"üí∏ –¶–µ–Ω–∞: {price}\n"
                     f"üìÜ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {approximate_date}\n"
                     "\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")
    await bot.send_message(message.from_user.id, order_details, disable_web_page_preview=True)


def product_order_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dp.register_message_handler(order)
